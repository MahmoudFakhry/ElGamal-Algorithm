(* ===================== *)
(* Part I of III: ElGamal Algorithm *)
(* ===================== *)

AliceKeyGeneration[p_,g_,e_,a_] := Module[{arr,PublicKey,rand,len},
Print["== Alice (Reciever) =="];
Print["Calling function AliceKeyGeneration..."];
p = RandomPrime[{10000,100000}]; (* Note: Pseudorandom is used *)
(* Note: Large primes should be generated for best security,with hundreds or thousands of digits \[Dash] here, we won't do that. *) 

arr = PrimitiveRootList[p]; (* Finds array of all primitive roots of p *)
len = Length[arr]; rand = RandomInteger[len];
g = arr[[rand]]; (* Takes random primitive root of p *)
a = RandomInteger[{1,p-2}]; (* Random Int in Range: [1, p-1) *)
e = PowerMod[g,a,p]; (* Computes "g ^ a (mod p)" *)
          
(* Now, values (p,g,e) public *)
PublicKey = {p,g,e};

Print["___"];
Print["Public Keys (p, g, e) generated: ", PublicKey];
Print[p," is random prime p, ",g, " is random primitive root of p, ",e, " is found with: e \[Congruent] g^a (mod p)"];
Print["Note: Alice also used private random integer value a, where a is 1 <= a < p - 1"];
Print["___"];
Return [PublicKey];
];

BobEncryption[p_,g_,e_] := Module[{m,b,c1,c2,PublicDecrypt},
Print["== Bob (Sender) =="];
Print["Calling function BobEncryption..."];
m = 999; (* Bob has access to the Original Text, m *)
(* M is the Plaintext, which Bob will convert to Ciphertext. *)
(* Note: m < p *)

b = RandomInteger[{1, p-2}]; (* Random Int in Range: [1, p-1) *)
(* C1 and C2 are Ciphertext (public values). *) 
c1 = PowerMod[g,b,p]; c2 = Mod[m*(e^b),p];

(* Now, values (c1,c2) public *)
PublicDecrypt = {c1, c2};

Print["___"];
Print["Bob now uing values p, g, e to calculate Ciphertext values c1, c2."];
Print["Ciphertext (c1, c2) generated: ", PublicDecrypt];
Print["Note: Bob also used private random integer value b, where b is 1 <= b < p - 1"];
Print["Also: Bob is the sender, so Bob has access to M, the Plaintext"];
Print["___"];

Return [PublicDecrypt];
];

AliceDecryption[p_,g_,e_,a_,c1_,c2_] := Module[{x, Original},
Print["== Alice (Reciever) =="];
Print["Calling function AliceDecryption..."];
x = PowerMod[c1, a, p];
Original = Mod[c2*(x^(p-2)),p];

Print["Using public values (as well as Alice's private value a), Alice now has Original Plaintext M found:"];
Return [Original];
];

ElGamal[] := Module[{p,g,a,e,arr,PublicKey,Ciphertext,Original,rand,len,Alice,Bob,m,b,c1,c2},
PublicKey = {p,g,e}; Ciphertext = {c1,c2}; 
(* All Alice's values *)
Alice = {p,g,e,a}; (* Public ("keys"): p,g,e; Private: a *)

(* All Bob's values \[Dash] "m" is plaintext*)
Bob = {c1,c2,m,b}; (* Public("cyphertext"): c1,c2; Private: m,b *)

(* Alice generates public keys (p,g,e) *)
PublicKey = AliceKeyGeneration[p,g,e,a];

(* Bob generates public ciphertext (c1,c2) *)
Ciphertext = BobEncryption[p,g,e];

(* Alice generates original plaintext M using (c1,c2) *)
Original = AliceDecryption[p,g,e,a,Ciphertext[[1]],Ciphertext[[2]]];

Return[Original];
];

AliceKeyGeneration[p_,g_,e_,a_] := Module[{arr,PublicKey,rand,len},
Print["== Alice (Reciever) =="];
Print["Calling function AliceKeyGeneration..."];
p = RandomPrime[{10000,100000}]; (* Note: Pseudorandom is used *)
(* Note: Large primes should be generated for best security,with hundreds or thousands of digits \[Dash] here, we won't do that. *) 

arr = PrimitiveRootList[p]; (* Finds array of all primitive roots of p *)
len = Length[arr]; rand = RandomInteger[len];
g = arr[[rand]]; (* Takes random primitive root of p *)
a = RandomInteger[{1,p-2}]; (* Random Int in Range: [1, p-1) *)
e = PowerMod[g,a,p]; (* Computes "g ^ a (mod p)" *)
          
(* Now, values (p,g,e) public *)
PublicKey = {p,g,e};

Print["___"];
Print["Public Keys (p, g, e) generated: ", PublicKey];
Print[p," is random prime p, ",g, " is random primitive root of p, ",e, " is found with: e \[Congruent] g^a (mod p)"];
Print["Note: Alice also used private random integer value a, where a is 1 <= a < p - 1"];
Print["___"];
Return [PublicKey];
];

BobEncryption[p_,g_,e_] := Module[{m,b,c1,c2,PublicDecrypt},
Print["== Bob (Sender) =="];
Print["Calling function BobEncryption..."];
m = 999; (* Bob has access to the Original Text, m *)
(* M is the Plaintext, which Bob will convert to Ciphertext. *)
(* Note: m < p *)

b = RandomInteger[{1, p-2}]; (* Random Int in Range: [1, p-1) *)
(* C1 and C2 are Ciphertext (public values). *) 
c1 = PowerMod[g,b,p]; c2 = Mod[m*(e^b),p];

(* Now, values (c1,c2) public *)
PublicDecrypt = {c1, c2};

Print["___"];
Print["Bob now uing values p, g, e to calculate Ciphertext values c1, c2."];
Print["Ciphertext (c1, c2) generated: ", PublicDecrypt];
Print["Note: Bob also used private random integer value b, where b is 1 <= b < p - 1"];
Print["Also: Bob is the sender, so Bob has access to M, the Plaintext"];
Print["___"];

Return [PublicDecrypt];
];

AliceDecryption[p_,g_,e_,a_,c1_,c2_] := Module[{x, Original},
Print["== Alice (Reciever) =="];
Print["Calling function AliceDecryption..."];
x = PowerMod[c1, a, p];
Original = Mod[c2*(x^(p-2)),p];

Print["Using public values (as well as Alice's private value a), Alice now has Original Plaintext M found:"];
Return [Original];
];

ElGamal[] := Module[{p,g,a,e,arr,PublicKey,Ciphertext,Original,rand,len,Alice,Bob,m,b,c1,c2},
PublicKey = {p,g,e}; Ciphertext = {c1,c2}; 
(* All Alice's values *)
Alice = {p,g,e,a}; (* Public ("keys"): p,g,e; Private: a *)

(* All Bob's values \[Dash] "m" is plaintext*)
Bob = {c1,c2,m,b}; (* Public("cyphertext"): c1,c2; Private: m,b *)

(* Alice generates public keys (p,g,e) *)
PublicKey = AliceKeyGeneration[p,g,e,a];

(* Bob generates public ciphertext (c1,c2) *)
Ciphertext = BobEncryption[p,g,e];

(* Alice generates original plaintext M using (c1,c2) *)
Original = AliceDecryption[p,g,e,a,Ciphertext[[1]],Ciphertext[[2]]];

Return[Original];
];

(* Press "enter" to see ElGamal Algorithm find Plaintext M=999. *)
ElGamal[]


(* ===================== *)
(* Part II of III: DHKE Algorithm *)
(* ===================== *)

AliceStep1[p_,g_,e_,a_] := Module[{arr,PublicKey,rand,len},
Print["== Alice (Reciever) =="];
Print["Calling function AliceStep1..."];

a = RandomInteger[{1,p}]; (* Random Int in Range: [1, p) *)
e = PowerMod[g,a,p]; (* Computes "g ^ a (mod p)" *)
          
(* Now, values (p,g,e) public *)
PublicKey = e;

Print["___"];
Print["Public Key (e) generated: ", PublicKey];
Print[e, " is found with: e \[Congruent] g^a (mod p)"];
Print["Note: Alice also used private random integer value a, where a is 1 <= a < p"];
Print["___"];
Return [PublicKey];
];

BobStep2[p_,g_,e_] := Module[{b,c1,Key,BobValues},
Print["== Bob (Sender) =="];
Print["Calling function BobStep2..."];

b = RandomInteger[{1, p-1}]; (* Random Int in Range: [1, p) *)

Key = PowerMod[e, b, p]; (* g^(ab) (mod p) is now the Secret Key *)

c1 = PowerMod[g,b,p];  

(* Now, value c1 public *)
BobValues = {c1, Key};

Print["___"];
Print["Public Key (c1) generated: ", c1];
Print[c1, " is found with: c1 \[Congruent] g^b (mod p)"];
Print["Note: Bob also used private random integer value b, where a is 1 <= b < p"];
Print[];
Print["Bob generates Private Key using: key \[Congruent] e^b \[Congruent] (g^a)^b \[Congruent] g^(ab) (mod p)"];
Print["___"];

Return [BobValues];
];

AliceStep3[c1_,a_,p_] := Module[{Key},
Print["== Alice (Reciever) =="];
Print["Calling function AliceStep3..."];

Key = PowerMod[c1,a,p];

Print["___"];
Print["Alice generates Private Key using: key \[Congruent] (c1)^a \[Congruent] (g^b)^a \[Congruent] g^(ab) (mod p)"];
Print["___"];

Return [Key];
];

DHKE[] := Module[{p,g,a,e,arr,AliceKey,SecretKey,PublicValues,BobValues,Original,rand,len,Alice,Bob,m,b,c1,c2},

p = RandomPrime[{10000,100000}]; (* Note: Pseudorandom is used *)
(* Note: Large primes should be generated for best security,with hundreds or thousands of digits \[Dash] here, we won't do that. *) 

arr = PrimitiveRootList[p]; (* Finds array of all primitive roots of p *)
len = Length[arr]; rand = RandomInteger[len];
g = arr[[rand]]; (* Takes random primitive root of p *)

(* Values *)
PublicValues = {p,g};

Print["== Public Values (Step 0) =="];
Print["___"];
Print["Public Keys (p, g) generated: ", PublicValues];
Print[p," is random prime p, and ",g, " is random primitive root of p."]; 
Print["___"];

(* All Alice's values *)
Alice = {e,a}; (* Public: e; Private: a *) 

(* All Bob's values *)
Bob = {c1,b}; (* Public: c1; Private: b *)

(* Alice generates public key "e" *)
e = AliceStep1[p,g,e,a];
(* Alice passes "e" to Bob *)

(* Bob generates public key "c1" *)
(* Bob created Private Key using "e" and random int "b" *)
BobValues = BobStep2[p,g,e];
(* Bob passes "c1" to Alice *)
c1 = BobValues[[1]];

(* Bob created Private Key using "c1" and random int "a" *)
AliceKey = AliceStep3[c1,a,p];

Print["Bob's Private Key is: ", BobValues[[2]]];
Print["Alice's Private Key is: ", AliceKey];

If[BobValues[[2]] == AliceKey, Return["Same private key!"]];
];

(* Press "enter" to see ElGamal Algorithm generate Matching Secret Keys. *)
DHKE[]


(* ===================== *)
(* Part III of III: Primitive Roots Explanation *)
(* ===================== *)

(* Note #1: Primitive roots of 7 can generate the entire set Zp*,where we have p=7  *)
(* Note #2: The first column shows the number we are checking to see whether it is a primitive root (mod 7) *) 
m = Table[If[j==1,i,Mod[i^(j-1) ,7]], {i,7},{j, 8}]

(* Note #3: Zp* is cyclic for prime p, since the set is {1, ... ,p-1}; note each value is a congruence class (mod p). We want a generator that can generate this set. *) 
(* We check each value from 1 to 7. The exponents we check go from 0 to 7, so we subtract 1 from j, since Mathematica indexes from 1... *)

Grid[m,Frame -> All]

(* We see 3,5 generates the set Zp*; note each value is a congruence class (mod p). For p=7, that is Zp*, so we have found the correct set. *)
(* We also see that 1 and 3 do not generate Zp*, so these are not primitive roots (mod 7). *)

PrimitiveRootList[7]

(* Note #1: Primitive roots of 3 can generate the entire set Zp*,where we have p=3 *)
(* Note #2: The first column shows the number we are checking to see whether it is a primitive root (mod 3) *) 

l = Table[If[j==1,i,Mod[i^(j-1) ,3]], {i,3},{j, 4}]

(* Note #3: Zp* is cyclic for prime p, since the set is {1, ... ,p-1}; note each value is a congruence class (mod p). We want a generator that can generate this set. *)
(* We check each value from 1 to 3. The exponents we check go from 0 to 3, so we subtract 1 from j,since Mathematica indexes from 1... *)

Grid[l,Frame -> All]

(* We see 2 generates the set {2, 1, 2}; note each value is a congruence class (mod p). For p=3, that is Zp*, so we have found the correct set. *)
(* We also see that 1,2,4,6,7 do not generate Zp*, so these are not primitive roots (mod 7). *) 

PrimitiveRootList[3]
